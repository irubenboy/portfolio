---
import SunIcon from '@/icons/Sun.astro'
import MoonIcon from '@/icons/Moon.astro'
import SystemIcon from '@/icons/System.astro'

const THEMES = ['light', 'dark', 'system']
---

<div class="relative mx-1">
    <button id="theme-toggle-button" class="flex hover:scale-125 transition">
        <span class="sr-only">Choose theme</span>
        <SunIcon id="light" class="theme-toggle-icon size-5 transition-all"/>
        <MoonIcon id="dark" class="theme-toggle-icon absolute size-5 transition-all"/>
        <SystemIcon id="system" class="theme-toggle-icon absolute size-5 transition-all"/>
    </button>
    <div id="themes-menu" class="hidden bg-white/90 absolute scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md dark:bg-gray-900/90 dark:border-gray-500/20">
        <ul>
            {
                THEMES.map((theme) => (
                    <li class="themes-menu-option capitalize px-2 py-1.5 cursor-pointer hover:bg-neutral-400/40 rounded-sm">{theme}</li>
                ))
            }
        </ul>
    </div>
</div>

<style>
    #themes-menu.open{
        display: inline;
        animation: scale-up-center .15s cubic-bezier(.25, .46, .45, .94) both;
    }

    @keyframes scale-up-center{
        from{
            transform: scale(0.8);
            opacity: 0;
        }

        to{
            transform: scale(1);
            opacity: 1;
        }
    }
</style>

<script is:inline>
    let remove = null
    const themesMenu = document.getElementById('themes-menu')
    const matchMedia = window.matchMedia("(prefers-color-scheme: dark)")

    // Open and close menu
    document.getElementById('theme-toggle-button').addEventListener('click', (e) => {
        e.stopPropagation()
        const isClosed = !themesMenu.classList.contains('open')
        themesMenu.classList[isClosed ? "add" : "remove"]('open')
    })

    // Close menu if user click in another part
    document.addEventListener('click', () => themesMenu.classList.remove('open'))

    const getThemePreference = () => {
        if(typeof localStorage !== "undefined"){
            return localStorage.getItem('theme') ?? 'system'
        }

        return windows.matchMedia('(prefers-color-scheme: dark)').matches 
            ? 'dark' 
            : 'light'
    }

    const updateIcon = themePreference => {
        document.querySelectorAll('.theme-toggle-icon').forEach(el => 
            el.style.scale = el.id === themePreference 
                                    ? 1 
                                    : 0
        )
    }

    const updateTheme = () => {
        if (remove != null) {
            remove()
        }

        matchMedia.addEventListener("change", updateTheme)

        remove = () => {
            matchMedia.removeEventListener("change", updateTheme)
        }

        const themePreference = getThemePreference()

        const isDark = themePreference === 'dark' || (themePreference === "system" && matchMedia.matches)

        updateIcon(themePreference)
        document.documentElement.classList[isDark ? 'add' : 'remove']('dark')
    }

    updateTheme()

    document.querySelectorAll('.themes-menu-option').forEach(el => {
        el.addEventListener('click', e => {
            localStorage.setItem('theme', e.target.innerText.toLowerCase().trim())
            updateTheme()
        })
    })
</script>